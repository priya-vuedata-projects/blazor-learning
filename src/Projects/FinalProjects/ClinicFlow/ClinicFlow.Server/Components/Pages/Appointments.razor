
@page "/appointments"
@inject AuthenticationStateProvider AuthStateProvider
@inject IAppointmentService AppointmentService
@inject IPatientService PatientService
@inject IDoctorService DoctorService
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using ClinicFlow.Shared.Models
@using Microsoft.JSInterop
@rendermode InteractiveServer

<PageTitle>Appointments</PageTitle>

<MudPaper Class="pa-6 rounded-xl shadow-md" Style="background-color:#f8fafc;">
    @* @if (!isAuthorized)
    {
        <MudAlert Severity="Severity.Error">
            You do not have access to this page.
        </MudAlert>
    }
    else
    { *@
        <MudStack Spacing="3">
            <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h4" Color="Color.Primary" Class="font-weight-bold">
                    Appointment Management
                </MudText>

                <MudStack Direction="Row" Spacing="2" AlignItems="AlignItems.Center">
                    <MudTextField @bind-Value="searchTerm"
                                  Placeholder="Search appointments..."
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Immediate="true"
                                  Variant="Variant.Outlined"
                                  Color="Color.Primary"
                                  Class="w-72" />
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Success"
                               OnClick="AddAppointmentJs"
                               StartIcon="@Icons.Material.Filled.EventAvailable"
                               Class="rounded-lg table-full-border font-semibold">
                        Add Appointment
                    </MudButton>
                </MudStack>
            </MudStack>

            <MudTable Items="filteredAppointments"
                      Hover="true"
                      Bordered="true"
                      Striped="true"
                      Dense="true"
                      Elevation="2"
                      Class="rounded-lg border border-grey-light table-full-border">
                <HeaderContent>
                    <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Dark" Class="font-weight-bold">Patient</MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Dark" Class="font-weight-bold">Doctor</MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Dark" Class="font-weight-bold">Date & Time</MudText></MudTh>
                    <MudTh Class="text-center"><MudText Typo="Typo.subtitle2" Color="Color.Dark" Class="font-weight-bold">Actions</MudText></MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd Class="py-2 px-3">@context.Patient?.Name</MudTd>
                    <MudTd Class="py-2 px-3">@context.Doctor?.Name</MudTd>
                    <MudTd Class="py-2 px-3">@context.DateTime.ToString("f")</MudTd>
                    <MudTd Class="text-center py-2 px-3">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       OnClick="@(() => EditAppointmentJs(context))"
                                       Title="Edit Appointment" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       Size="Size.Small"
                                       OnClick="@(() => DeleteAppointmentJs(context.Id))"
                                       Title="Delete Appointment" />
                    </MudTd>
                </RowTemplate>

                <NoRecordsContent>
                    <MudText Typo="Typo.subtitle1"
                             Align="Align.Center"
                             Color="Color.Secondary"
                             Class="my-4">
                        No appointments found.
                    </MudText>
                </NoRecordsContent>
            </MudTable>
        </MudStack>
    @* } *@
</MudPaper>

<style>
    .table-full-border table {
        border-collapse: collapse;
        width: 100%;
    }

    .table-full-border th, .table-full-border td {
        border: 1px solid #d3d3d3 !important;
        padding: 8px;
    }

    .table-full-border th {
        background-color: #e9eff5;
    }

    .table-full-border tr:hover td {
        background-color: #f1f6ff;
        transition: background-color 0.2s ease;
    }
</style>


@code {
    private bool isAuthorized;

    private List<Appointment> appointments = new();
    private List<Patient> patients = new();
    private List<Doctor> doctors = new();
    private string searchTerm = string.Empty;

    [Inject] IJSRuntime JS { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        patients = await PatientService.GetAllAsync();
        doctors = await DoctorService.GetAllAsync();
        appointments = await AppointmentService.GetAllAsync();

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthorized = user.Identity?.IsAuthenticated == true && user.IsInRole("Doctor");
    }

    private IEnumerable<Appointment> filteredAppointments => string.IsNullOrWhiteSpace(searchTerm)
        ? appointments
        : appointments.Where(a =>
            (!string.IsNullOrEmpty(a.Patient?.Name) && a.Patient.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(a.Doctor?.Name) && a.Doctor.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));

    // ---------------- Add Appointment ----------------
    private async Task AddAppointmentJs()
    {
        if (!patients.Any() || !doctors.Any())
        {
            await JS.InvokeVoidAsync("alert", "Please add patients and doctors first!");
            return;
        }

        // Select patient
        var patientNames = string.Join(",", patients.Select(p => p.Name));
        var patientName = await JS.InvokeAsync<string>("prompt", $"Select patient: ({patientNames})");
        var patient = patients.FirstOrDefault(p => p.Name.Equals(patientName, StringComparison.OrdinalIgnoreCase));
        if (patient == null) return;

        // Select doctor
        var doctorNames = string.Join("\n", doctors.Select(d => d.Name));
        var doctorName = await JS.InvokeAsync<string>("prompt", $"Select doctor:\n{doctorNames}");
        var doctor = doctors.FirstOrDefault(d =>
            string.Equals(d.Name.Trim(), doctorName?.Trim(), StringComparison.OrdinalIgnoreCase));

        if (doctor == null)
        {
            await JS.InvokeVoidAsync("alert", "Doctor not found! Please enter exact name.");
            return;
        }

        // Enter date & time
        var dateStr = await JS.InvokeAsync<string>("prompt", "Enter date & time (yyyy-MM-dd HH:mm):");
        if (!DateTime.TryParse(dateStr, out var dateTime)) return;

        var newAppointment = new Appointment
        {
            PatientId = patient.Id,
            DoctorId = doctor.Id,
            DateTime = dateTime
        };

        await AppointmentService.AddAsync(newAppointment);
        appointments = await AppointmentService.GetAllAsync();
        await JS.InvokeVoidAsync("alert", "Appointment added successfully!");
    }

    // ---------------- Edit Appointment ----------------
    private async Task EditAppointmentJs(Appointment appt)
    {
        var patientName = await JS.InvokeAsync<string>("prompt", "Edit patient:", appt.Patient?.Name);
        var patient = patients.FirstOrDefault(p => p.Name.Equals(patientName, StringComparison.OrdinalIgnoreCase));
        if (patient == null) return;

        var doctorName = await JS.InvokeAsync<string>("prompt", "Edit doctor:", appt.Doctor?.Name);
        var doctor = doctors.FirstOrDefault(d => d.Name.Equals(doctorName, StringComparison.OrdinalIgnoreCase));
        if (doctor == null) return;

        var dateStr = await JS.InvokeAsync<string>("prompt", "Edit date & time (yyyy-MM-dd HH:mm):", appt.DateTime.ToString("yyyy-MM-dd HH:mm"));
        if (!DateTime.TryParse(dateStr, out var dateTime)) return;

        appt.PatientId = patient.Id;
        appt.DoctorId = doctor.Id;
        appt.DateTime = dateTime;

        await AppointmentService.UpdateAsync(appt);
        appointments = await AppointmentService.GetAllAsync();
        await JS.InvokeVoidAsync("alert", "Appointment updated successfully!");
    }

    // ---------------- Delete Appointment ----------------
    private async Task DeleteAppointmentJs(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this appointment?");
        if (!confirmed) return;

        await AppointmentService.DeleteAsync(id);
        appointments = await AppointmentService.GetAllAsync();
        await JS.InvokeVoidAsync("alert", "Appointment deleted successfully!");
    }
}
