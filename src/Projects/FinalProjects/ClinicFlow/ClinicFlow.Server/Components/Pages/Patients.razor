
@page "/patients"
@attribute [Authorize]
@inject IPatientService PatientService
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using ClinicFlow.Shared.Models
@using Microsoft.JSInterop
@rendermode InteractiveServer

<PageTitle>Patients</PageTitle>

<MudPaper Class="pa-6 rounded-xl shadow-md" Style="background-color:#f8fafc;">
    <MudStack Spacing="3">
        <!-- Header Section -->
        <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h4" Color="Color.Primary" Class="font-weight-bold">
                Patient Management
            </MudText>

            <MudStack Direction="Row" Spacing="2" AlignItems="AlignItems.Center">
                <MudTextField @bind-Value="searchTerm"
                              Placeholder="Search patients..."
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Immediate="true"
                              Variant="Variant.Outlined"
                              Color="Color.Primary"
                              Class="w-72" />
                <MudButton Variant="Variant.Filled"
                           Color="Color.Success"
                           OnClick="AddPatientJs"
                           StartIcon="@Icons.Material.Filled.PersonAdd"
                           Class="rounded-lg table-full-border font-semibold">
                    Add Patient
                </MudButton>
            </MudStack>
        </MudStack>

        <!-- Table Section -->
        <MudTable Items="filteredPatients"
                  Hover="true"
                  Bordered="true"
                  Striped="true"
                  Dense="true"
                  Elevation="2"
                  Class="rounded-lg border border-grey-light table-full-border">
            <HeaderContent>
                <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Dark" Class="font-weight-bold">Name</MudText></MudTh>
                <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Dark" Class="font-weight-bold">Age</MudText></MudTh>
                <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Dark" Class="font-weight-bold">Contact</MudText></MudTh>
                <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Dark" Class="font-weight-bold">Gender</MudText></MudTh>
                <MudTh><MudText Typo="Typo.subtitle2" Color="Color.Dark" Class="font-weight-bold">Address</MudText></MudTh>
                <MudTh Class="text-center"><MudText Typo="Typo.subtitle2" Color="Color.Dark" Class="font-weight-bold">Actions</MudText></MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd Class="py-2 px-3">@context.Name</MudTd>
                <MudTd Class="py-2 px-3">@context.Age</MudTd>
                <MudTd Class="py-2 px-3">@context.Contact</MudTd>
                <MudTd Class="py-2 px-3">@context.Gender</MudTd>
                <MudTd Class="py-2 px-3">@context.Address</MudTd>
                <MudTd Class="text-center py-2 px-3">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   OnClick="@(() => EditPatientJs(context))"
                                   Title="Edit Patient" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   Size="Size.Small"
                                   OnClick="@(() => DeletePatientJs(context.Id))"
                                   Title="Delete Patient" />
                </MudTd>
            </RowTemplate>

            <NoRecordsContent>
                <MudText Typo="Typo.subtitle1"
                         Align="Align.Center"
                         Color="Color.Secondary"
                         Class="my-4">
                    No patients found.
                </MudText>
            </NoRecordsContent>
        </MudTable>
    </MudStack>
</MudPaper>

<style>
    .table-full-border table {
        border-collapse: collapse;
        width: 100%;
    }

    .table-full-border th, .table-full-border td {
        border: 1px solid #d3d3d3 !important;
        padding: 8px;
    }

    .table-full-border th {
        background-color: #e9eff5;
    }

    .table-full-border tr:hover td {
        background-color: #f1f6ff;
        transition: background-color 0.2s ease;
    }
</style>


@code {
    private List<Patient> patients = new();
    private string searchTerm = string.Empty;

    [Inject] IJSRuntime JS { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        patients = await PatientService.GetAllAsync();
    }

    private IEnumerable<Patient> filteredPatients => string.IsNullOrWhiteSpace(searchTerm)
        ? patients
        : patients.Where(p =>
            (!string.IsNullOrEmpty(p.Name) && p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(p.Contact) && p.Contact.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(p.Gender) && p.Gender.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(p.Address) && p.Address.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));

    // ---------------- Add Patient ----------------
    private async Task AddPatientJs()
    {
        var name = await JS.InvokeAsync<string>("prompt", "Enter patient name:");
        if (string.IsNullOrWhiteSpace(name)) return;

        var ageStr = await JS.InvokeAsync<string>("prompt", "Enter age:");
        if (!int.TryParse(ageStr, out var age)) return;

        var contact = await JS.InvokeAsync<string>("prompt", "Enter contact info:");
        if (string.IsNullOrWhiteSpace(contact)) return;

        var gender = await JS.InvokeAsync<string>("prompt", "Enter gender:");
        if (string.IsNullOrWhiteSpace(gender)) return;

        var address = await JS.InvokeAsync<string>("prompt", "Enter address:");
        if (string.IsNullOrWhiteSpace(address)) return;

        var newPatient = new Patient
        {
            Name = name,
            Age = age,
            Contact = contact,
            Gender = gender,
            Address = address
        };

        await PatientService.AddAsync(newPatient);
        patients = await PatientService.GetAllAsync();
        await JS.InvokeVoidAsync("alert", "Patient added successfully!");
    }

    // ---------------- Edit Patient ----------------
    private async Task EditPatientJs(Patient patient)
    {
        var name = await JS.InvokeAsync<string>("prompt", "Edit patient name:", patient.Name);
        if (string.IsNullOrWhiteSpace(name)) return;

        var ageStr = await JS.InvokeAsync<string>("prompt", "Edit age:", patient.Age.ToString());
        if (!int.TryParse(ageStr, out var age)) return;

        var contact = await JS.InvokeAsync<string>("prompt", "Edit contact:", patient.Contact);
        if (string.IsNullOrWhiteSpace(contact)) return;

        var gender = await JS.InvokeAsync<string>("prompt", "Edit gender:", patient.Gender);
        if (string.IsNullOrWhiteSpace(gender)) return;

        var address = await JS.InvokeAsync<string>("prompt", "Edit address:", patient.Address);
        if (string.IsNullOrWhiteSpace(address)) return;

        patient.Name = name;
        patient.Age = age;
        patient.Contact = contact;
        patient.Gender = gender;
        patient.Address = address;

        await PatientService.UpdateAsync(patient);
        patients = await PatientService.GetAllAsync();
        await JS.InvokeVoidAsync("alert", "Patient updated successfully!");
    }

    // ---------------- Delete Patient ----------------
    private async Task DeletePatientJs(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this patient?");
        if (!confirmed) return;

        await PatientService.DeleteAsync(id);
        patients = await PatientService.GetAllAsync();
        await JS.InvokeVoidAsync("alert", "Patient deleted successfully!");
    }
}
