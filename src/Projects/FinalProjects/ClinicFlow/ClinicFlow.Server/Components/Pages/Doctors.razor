
@page "/doctors"
@attribute [Authorize]
@inject IDoctorService DoctorService
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using ClinicFlow.Shared.Models
@using Microsoft.JSInterop
@rendermode InteractiveServer
@using ClinicFlow.Components.Common

<PageTitle>Doctors</PageTitle>

<MudPaper Class="pa-6 rounded-xl shadow-md" Style="background-color:#f8fafc;">
    <MudStack Spacing="3">
        <!-- Header Section -->
        <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h4" Color="Color.Primary" Class="font-weight-bold">
                Doctor Management
            </MudText>

            <MudStack Direction="Row" Spacing="2" AlignItems="AlignItems.Center">
                <MudTextField @bind-Value="searchTerm"
                              Placeholder="Search doctors..."
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Immediate="true"
                              Variant="Variant.Outlined"
                              Color="Color.Primary"
                              Class="w-72" />
                <MudButton Variant="Variant.Filled"
                           Color="Color.Success"
                           OnClick="AddDoctorJs"
                           StartIcon="@Icons.Material.Filled.PersonAdd"
                           Class="rounded-lg table-full-border font-semibold">
                    Add Doctor
                </MudButton>
            </MudStack>
        </MudStack>

        <!-- Table Section -->
       <MudGrid Spacing="3">
            @if (filteredDoctors.Any())
            {
                @foreach (var doctor in filteredDoctors)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <DoctorCard Doctor="@doctor"
                                    OnEdit="EditDoctorJs"
                                    OnDelete="DeleteDoctorJs"
                                    BackgroundColor="#ffffff"
                                    TextColor="#1e293b" />
                    </MudItem>
                }
            }
            else
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle1"
                             Align="Align.Center"
                             Color="Color.Secondary"
                             Class="my-4">
                        No doctors found.
                    </MudText>
                </MudItem>
            }
        </MudGrid>
    </MudStack>
</MudPaper>

<style>
    .table-full-border table {
        border-collapse: collapse;
        width: 100%;
    }

    .table-full-border th, .table-full-border td {
        border: 1px solid #d3d3d3 !important;
        padding: 8px;
    }

    .table-full-border th {
        background-color: #e9eff5;
    }

    .table-full-border tr:hover td {
        background-color: #f1f6ff;
        transition: background-color 0.2s ease;
    }
</style>

@code {
    private List<Doctor> doctors = new();
    private string searchTerm = string.Empty;

    [Inject] IJSRuntime JS { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        doctors = await DoctorService.GetAllAsync();
    }

    private IEnumerable<Doctor> filteredDoctors => string.IsNullOrWhiteSpace(searchTerm)
        ? doctors
        : doctors.Where(d =>
            (!string.IsNullOrEmpty(d.Name) && d.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(d.Specialty) && d.Specialty.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(d.Contact) && d.Contact.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));

    // ---------------- Add Doctor ----------------
    private async Task AddDoctorJs()
    {
        var name = await JS.InvokeAsync<string>("prompt", "Enter doctor name:");
        if (string.IsNullOrWhiteSpace(name)) return;

        var specialty = await JS.InvokeAsync<string>("prompt", "Enter specialty:");
        if (string.IsNullOrWhiteSpace(specialty)) return;

        var contact = await JS.InvokeAsync<string>("prompt", "Enter contact info:");
        if (string.IsNullOrWhiteSpace(contact)) return;

        var newDoctor = new Doctor
        {
            Name = name,
            Specialty = specialty,
            Contact = contact
        };

        await DoctorService.AddAsync(newDoctor);
        doctors = await DoctorService.GetAllAsync();
        await JS.InvokeVoidAsync("alert", "Doctor added successfully!");
    }

    // ---------------- Edit Doctor ----------------
    private async Task EditDoctorJs(Doctor doctor)
    {
        var name = await JS.InvokeAsync<string>("prompt", "Edit doctor name:", doctor.Name);
        if (string.IsNullOrWhiteSpace(name)) return;

        var specialty = await JS.InvokeAsync<string>("prompt", "Edit specialty:", doctor.Specialty);
        if (string.IsNullOrWhiteSpace(specialty)) return;

        var contact = await JS.InvokeAsync<string>("prompt", "Edit contact info:", doctor.Contact);
        if (string.IsNullOrWhiteSpace(contact)) return;

        doctor.Name = name;
        doctor.Specialty = specialty;
        doctor.Contact = contact;

        await DoctorService.UpdateAsync(doctor);
        doctors = await DoctorService.GetAllAsync();
        await JS.InvokeVoidAsync("alert", "Doctor updated successfully!");
    }

    // ---------------- Delete Doctor ----------------
    private async Task DeleteDoctorJs(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this doctor?");
        if (!confirmed) return;

        await DoctorService.DeleteAsync(id);
        doctors = await DoctorService.GetAllAsync();
        await JS.InvokeVoidAsync("alert", "Doctor deleted successfully!");
    }
}
