@page "/departments/create"
@using Microsoft.EntityFrameworkCore
@using BlazorAppServer.Models
@inject IDbContextFactory<BlazorAppServer.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<PageTitle>Create</PageTitle>

<h1>Create Department</h1>
<hr />

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="@Department" OnValidSubmit="AddDepartment" FormName="create">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Department.Name" class="form-control" aria-required="true"/> 
                <ValidationMessage For="@(() => Department.Name)" class="text-danger" />
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Department.Description" class="form-control" /> 
                <ValidationMessage For="@(() => Department.Description)" class="text-danger" />
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/departments">Back to List</a>
</div>

@code {
   
    private Department Department { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddDepartment()
    {
        using var context = DbFactory.CreateDbContext();
        context.Departments.Add(Department);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/departments");
    }
}
